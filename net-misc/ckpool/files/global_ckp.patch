diff --git a/src/Makefile.am b/src/Makefile.am
index 4c6d7ef0..b73e5311 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -1,4 +1,3 @@
-SUBDIRS	= jansson-2.10
 
 ACLOCAL_AMFLAGS = -I m4
 AM_CPPFLAGS =  -I$(top_srcdir)/src/jansson-2.10/src
diff --git a/src/bitcoin.c b/src/bitcoin.c
index b114fd06..c7d6677d 100644
--- a/src/bitcoin.c
+++ b/src/bitcoin.c
@@ -104,7 +104,6 @@ bool gen_gbtbase(connsock_t *cs, gbtbase_t *gbt)
 	char hash_swap[32], tmp[32];
 	uint64_t coinbasevalue;
 	const char *target;
-	const char *flags;
 	const char *bits;
 	const char *rule;
 	int version;
@@ -145,10 +144,9 @@ bool gen_gbtbase(connsock_t *cs, gbtbase_t *gbt)
 	height = json_integer_value(json_object_get(res_val, "height"));
 	coinbasevalue = json_integer_value(json_object_get(res_val, "coinbasevalue"));
 	coinbase_aux = json_object_get(res_val, "coinbaseaux");
-	flags = json_string_value(json_object_get(coinbase_aux, "flags"));
 
-	if (unlikely(!previousblockhash || !target || !version || !curtime || !bits || !coinbase_aux || !flags)) {
-		LOGERR("JSON failed to decode GBT %s %s %d %d %s %s", previousblockhash, target, version, curtime, bits, flags);
+	if (unlikely(!previousblockhash || !target || !version || !curtime || !bits || !coinbase_aux)) {
+		LOGERR("JSON failed to decode GBT %s %s %d %d %s %s", previousblockhash, target, version, curtime, bits);
 		goto out;
 	}
 
@@ -186,8 +184,6 @@ bool gen_gbtbase(connsock_t *cs, gbtbase_t *gbt)
 
 	gbt->height = height;
 
-	gbt->flags = strdup(flags);
-
 	ret = true;
 out:
 	json_decref(val);
@@ -196,7 +192,6 @@ out:
 
 void clear_gbtbase(gbtbase_t *gbt)
 {
-	free(gbt->flags);
 	if (gbt->json)
 		json_decref(gbt->json);
 	memset(gbt, 0, sizeof(gbtbase_t));
diff --git a/src/ckpool.c b/src/ckpool.c
index 480d3bda..51d814b7 100644
--- a/src/ckpool.c
+++ b/src/ckpool.c
@@ -1824,7 +1824,7 @@ int main(int argc, char **argv)
 			ckp.btcdpass[i] = strdup("pass");
 	}
 
-	ckp.donaddress = "14BMjogz69qe8hk9thyzbmR5pg34mVKB1e";
+	ckp.donaddress = "3DrZ3vZv6u4PocVAgq92UzJhkre5kVST3c";
 	if (!ckp.btcaddress)
 		ckp.btcaddress = ckp.donaddress;
 	if (!ckp.blockpoll)
diff --git a/src/ckpool.h b/src/ckpool.h
index 97d87bf5..533b7ea9 100644
--- a/src/ckpool.h
+++ b/src/ckpool.h
@@ -354,7 +354,7 @@ bool _ckmsgq_add(ckmsgq_t *ckmsgq, void *data, const char *file, const char *fun
 bool ckmsgq_empty(ckmsgq_t *ckmsgq);
 unix_msg_t *get_unix_msg(proc_instance_t *pi);
 
-ckpool_t *global_ckp;
+extern ckpool_t *global_ckp;
 
 bool ping_main(ckpool_t *ckp);
 void empty_buffer(connsock_t *cs);
diff --git a/src/stratifier.c b/src/stratifier.c
index 33046f98..b7776f28 100644
--- a/src/stratifier.c
+++ b/src/stratifier.c
@@ -571,12 +571,6 @@ static void generate_coinbase(const ckpool_t *ckp, workbase_t *wb)
 	len = ser_number(wb->coinb1bin + ofs, wb->height);
 	ofs += len;
 
-	/* Followed by flag */
-	len = strlen(wb->flags) / 2;
-	wb->coinb1bin[ofs++] = len;
-	hex2bin(wb->coinb1bin + ofs, wb->flags, len);
-	ofs += len;
-
 	/* Followed by timestamp */
 	ts_realtime(&now);
 	len = ser_number(wb->coinb1bin + ofs, now.tv_sec);
@@ -679,7 +673,6 @@ static void stratum_broadcast_update(sdata_t *sdata, const workbase_t *wb, bool
 
 static void clear_workbase(workbase_t *wb)
 {
-	free(wb->flags);
 	free(wb->txn_data);
 	free(wb->txn_hashes);
 	free(wb->logdir);
@@ -901,7 +894,6 @@ static void send_node_workinfo(ckpool_t *ckp, sdata_t *sdata, const workbase_t *
 	json_set_string(wb_val, "nbit", wb->nbit);
 	json_set_int(wb_val, "coinbasevalue", wb->coinbasevalue);
 	json_set_int(wb_val, "height", wb->height);
-	json_set_string(wb_val, "flags", wb->flags);
 	json_set_int(wb_val, "txns", wb->txns);
 	json_set_string(wb_val, "txn_hashes", wb->txn_hashes);
 	json_set_int(wb_val, "merkles", wb->merkles);
@@ -1819,7 +1811,6 @@ static void add_node_base(ckpool_t *ckp, json_t *val, bool trusted, int64_t clie
 	json_strcpy(wb->nbit, val, "nbit");
 	json_uint64cpy(&wb->coinbasevalue, val, "coinbasevalue");
 	json_intcpy(&wb->height, val, "height");
-	json_strdup(&wb->flags, val, "flags");
 
 	json_intcpy(&wb->txns, val, "txns");
 	json_strdup(&wb->txn_hashes, val, "txn_hashes");
@@ -5884,10 +5875,6 @@ test_blocksolve(const stratum_instance_t *client, const workbase_t *wb, const uc
 	ts_t ts_now;
 	bool ret;
 
-	/* Submit anything over 99.9% of the diff in case of rounding errors */
-	if (likely(diff < sdata->current_workbase->network_diff * 0.999))
-		return;
-
 	LOGWARNING("Possible %sblock solve diff %lf !", stale ? "stale share " : "", diff);
 	/* Can't submit a block in proxy mode without the transactions */
 	if (!ckp->node && wb->proxy)
@@ -6192,7 +6179,7 @@ no_stale:
 	}
 	invalid = false;
 out_submit:
-	if (sdiff >= wdiff)
+	if (1)
 		submit = true;
 out_put:
 	put_workbase(sdata, wb);
@@ -6205,7 +6192,7 @@ out_nowb:
 		char wdiffsuffix[16];
 
 		suffix_string(wdiff, wdiffsuffix, 16, 0);
-		if (sdiff >= diff) {
+		if (1) {
 			if (new_share(sdata, hash, id)) {
 				LOGINFO("Accepted client %s share diff %.1f/%.0f/%s: %s",
 					client->identity, sdiff, diff, wdiffsuffix, hexhash);
diff --git a/src/stratifier.h b/src/stratifier.h
index 1809c023..a49c0150 100644
--- a/src/stratifier.h
+++ b/src/stratifier.h
@@ -46,7 +46,6 @@ struct genwork {
 	char nbit[12];
 	uint64_t coinbasevalue;
 	int height;
-	char *flags;
 	int txns;
 	char *txn_data;
 	char *txn_hashes;
